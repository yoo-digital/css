@import "variables";

// A mixin that allows you to set "box-sizing: border-box" as a global default.
// It is provided as a mixin so you can decide if it should be set or not.
// Not every library or framework is compatible with this setting.
@mixin global-border-box() {
  html {
    box-sizing: border-box;
  }

  *,
  *::before,
  *::after {
    box-sizing: inherit;
  }
}

// Helper that defines border-box as the box-sizing strategy
// for the element and its pseudo-elements.
// Useful if it has to be explicitly set on elements or components.
@mixin border-box() {
  box-sizing: border-box;

  &::before,
  &::after {
    box-sizing: border-box;
  }
}

// Positions the element fixed and adjusts the top offset
// This mixin will not work for IE 11, as it does not support "position: sticky":
// https://caniuse.com/#search=sticky
@mixin sticky($top: 0, $z-index: $z-index-sticky) {
  position: sticky;
  z-index: $z-index;
  top: $top;
  left: 0;
}

// Applies a modifier for every font-size unit available in the provided map.
@mixin font-size-modifier($map: $font-size-map) {
  @each $key, $value in $map {
    &--#{$key} {
      font-size: map-get($map, $key);
    }
  }
}

// This mixin allows to clip text which the element contains,
// by providing the number of lines and the line height.
// This will work for Edge, Firefox (latest) and Chrome.
// It won't clip in IE 11.
// stylelint-disable value-no-vendor-prefix, property-no-vendor-prefix
@mixin max-lines($number-of-lines, $line-height: $line-height-base) {
  display: -webkit-box;
  overflow: hidden;
  line-height: $line-height;
  text-overflow: ellipsis;
  -webkit-line-clamp: $number-of-lines;
  -webkit-box-orient: vertical;
}
// stylelint-enable value-no-vendor-prefix, property-no-vendor-prefix

// The breakpoint function is a private utility function that is not intended
// for external usage. It takes a breakpoint name, checks if it is defined,
// and returns either the breakpoint value or a warning.
@function _breakpoint($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @return map-get($breakpoints, $breakpoint);
  } @else {
    @warn "No breakpoint called "#{$breakpoint}" was found. Possible values include: #{map-keys($breakpoints)}";
    @return null;
  }
}

// The at-least mixin acts as a min-width media query for the given breakpoint.
@mixin at-least($breakpoint) {
  $width: _breakpoint($breakpoint);

  @if $width {
    @media (min-width: $width) {
      @content;
    }
  }
}

// The up-to mixin acts as a max-width media query for the given breakpoint.
// 1px is subtracted from the breakpoint in order to ensure that the styles
// are not applied, starting from the breakpoint.
// The breakpoints have to be defined in px. calc(em - 1px) unfortunately does not work
// in Edge:
// https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/15515851/
@mixin up-to($breakpoint) {
  $width: _breakpoint($breakpoint) - 1px;

  @if $width {
    @media (max-width: $width) {
      @content;
    }
  }
}
